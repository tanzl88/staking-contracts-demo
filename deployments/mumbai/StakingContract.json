{
  "address": "0xC288d45f7BC48d769371B8F75D8208Ee35c739c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vestingDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getStakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x41f36c5d9887b529b80cf119cfbc60a3702ee15e24f2161cca4a33459d654316",
  "receipt": {
    "to": null,
    "from": "0x273bbe520a4D2874188016417bceA548599F89f0",
    "contractAddress": "0xC288d45f7BC48d769371B8F75D8208Ee35c739c1",
    "transactionIndex": 3,
    "gasUsed": "1253692",
    "logsBloom": "0x
    "blockHash": "0x4d9f85c4dbc14a5bd8e41a5d2d7dbb76ebddc06c8b7e9c971a46dbd6479110b9",
    "transactionHash": "0x41f36c5d9887b529b80cf119cfbc60a3702ee15e24f2161cca4a33459d654316",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 40002786,
        "transactionHash": "0x41f36c5d9887b529b80cf119cfbc60a3702ee15e24f2161cca4a33459d654316",
        "address": "0xC288d45f7BC48d769371B8F75D8208Ee35c739c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000273bbe520a4d2874188016417bcea548599f89f0"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0x4d9f85c4dbc14a5bd8e41a5d2d7dbb76ebddc06c8b7e9c971a46dbd6479110b9"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 40002786,
        "transactionHash": "0x41f36c5d9887b529b80cf119cfbc60a3702ee15e24f2161cca4a33459d654316",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000273bbe520a4d2874188016417bcea548599f89f0",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000d5cadbd756f5000000000000000000000000000000000000000000000000006e15c0d046fc4a8000000000000000000000000000000000000000000000152fee33fd2eaf0a6ed00000000000000000000000000000000000000000000000006d3ff5f46fa5558000000000000000000000000000000000000000000000152fef09c80a866163d",
        "logIndex": 61,
        "blockHash": "0x4d9f85c4dbc14a5bd8e41a5d2d7dbb76ebddc06c8b7e9c971a46dbd6479110b9"
      }
    ],
    "blockNumber": 40002786,
    "cumulativeGasUsed": "3273204",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD243805353884D606c30c69FA0440E5D87Bf53d7",
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "56e4150152a3a44106537cc31d6068c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingContract.sol\":\"StakingContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/StakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract StakingContract is Ownable, ReentrancyGuard {\\n    // Address of the staking token\\n    address public tokenAddress;\\n\\n//    Vesting duration\\n    uint256 public vestingDuration;\\n\\n    // Mapping to track stakers and their stakes\\n    mapping(address => uint256) public stakedAmount;\\n    mapping(address => uint256) public startTime;\\n\\n    // Whitelisted addresses\\n    mapping(address => bool) public whitelist;\\n\\n    // Events to log staking and withdrawal\\n    event Staked(address indexed staker, uint256 amount);\\n    event Withdrawn(address indexed staker, uint256 amount);\\n\\n    // Modifiers to check if an address is whitelisted\\n    modifier onlyWhitelisted() {\\n        require(whitelist[msg.sender], \\\"You are not whitelisted.\\\");\\n        _;\\n    }\\n\\n    // Constructor to set the owner\\n    constructor(address _tokenAddress, uint256 _vestingDuration) Ownable() {\\n        tokenAddress = _tokenAddress;\\n        vestingDuration = _vestingDuration;\\n    }\\n\\n    // Add or remove addresses from the whitelist\\n    function updateWhitelist(address _address, bool _status) external onlyOwner {\\n        whitelist[_address] = _status;\\n    }\\n\\n    // Stake tokens with a vesting schedule\\n    function stake(uint256 _amount) external onlyWhitelisted nonReentrant {\\n        require(_amount > 0, \\\"Staked amount must be greater than 0\\\");\\n\\n        // Ensure the sender is not already staking\\n        require(stakedAmount[msg.sender] == 0, \\\"You have an active stake\\\");\\n\\n        // Transfer tokens from the sender to this contract\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.transferFrom(msg.sender, address(this), _amount), \\\"Token transfer failed\\\");\\n\\n        // Record the staking details\\n        stakedAmount[msg.sender] = _amount;\\n        startTime[msg.sender] = block.timestamp;\\n\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    // Withdraw staked tokens after the vesting period\\n    function withdraw() external nonReentrant {\\n        require(stakedAmount[msg.sender] > 0, \\\"No stake to withdraw\\\");\\n\\n        uint256 unlockTime = startTime[msg.sender] + vestingDuration;\\n\\n        // Ensure the vesting period has ended\\n        require(block.timestamp >= unlockTime, \\\"Vesting period has not ended yet\\\");\\n\\n        // Transfer the staked tokens to the sender\\n        uint256 amountToTransfer = stakedAmount[msg.sender];\\n        stakedAmount[msg.sender] = 0;\\n        startTime[msg.sender] = 0;\\n\\n        emit Withdrawn(msg.sender, amountToTransfer);\\n\\n        // Transfer the tokens back to the sender\\n        IERC20 token = IERC20(tokenAddress);\\n        require(token.transfer(msg.sender, amountToTransfer), \\\"Token transfer failed\\\");\\n    }\\n\\n    function getStakedAmount(address _address) public view returns (uint256) {\\n        return stakedAmount[_address];\\n    }\\n\\n    function isWhitelisted(address _address) public view returns (bool) {\\n        return whitelist[_address];\\n    }\\n}\\n\",\"keccak256\":\"0x6641d3eb6a080fd3cfeb7e27e3ab9e9c700ea21491ee8d827b92fa82d41fc156\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620016753803806200167583398181016040528101906200003791906200021f565b620000576200004b620000ae60201b60201c565b620000b660201b60201c565b6001808190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600381905550505062000266565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ac826200017f565b9050919050565b620001be816200019f565b8114620001ca57600080fd5b50565b600081519050620001de81620001b3565b92915050565b6000819050919050565b620001f981620001e4565b81146200020557600080fd5b50565b6000815190506200021981620001ee565b92915050565b600080604083850312156200023957620002386200017a565b5b60006200024985828601620001cd565b92505060206200025c8582860162000208565b9150509250929050565b6113ff80620002766000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c5780639d76ea58116100665780639d76ea5814610200578063a694fc3a1461021e578063f2fde38b1461023a578063f993185514610256576100cf565b8063715018a6146101a85780638da5cb5b146101b25780639b19251a146101d0576100cf565b80630d392cd9146100d45780631514617e146100f05780633af32abf1461010e5780633ccfd60b1461013e5780634da6a556146101485780636e1dc66e14610178575b600080fd5b6100ee60048036038101906100e99190610d4d565b610286565b005b6100f86102e9565b6040516101059190610da6565b60405180910390f35b61012860048036038101906101239190610dc1565b6102ef565b6040516101359190610dfd565b60405180910390f35b610146610345565b005b610162600480360381019061015d9190610dc1565b610670565b60405161016f9190610da6565b60405180910390f35b610192600480360381019061018d9190610dc1565b6106b9565b60405161019f9190610da6565b60405180910390f35b6101b06106d1565b005b6101ba6106e5565b6040516101c79190610e27565b60405180910390f35b6101ea60048036038101906101e59190610dc1565b61070e565b6040516101f79190610dfd565b60405180910390f35b61020861072e565b6040516102159190610e27565b60405180910390f35b61023860048036038101906102339190610e6e565b610754565b005b610254600480360381019061024f9190610dc1565b610a75565b005b610270600480360381019061026b9190610dc1565b610af8565b60405161027d9190610da6565b60405180910390f35b61028e610b10565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60035481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61034d610b8e565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c690610ef8565b60405180910390fd5b6000600354600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461041e9190610f47565b905080421015610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610fc7565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516105779190610da6565b60405180910390a26000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016105e1929190610fe7565b6020604051808303816000875af1158015610600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106249190611025565b610663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065a9061109e565b60405180910390fd5b50505061066e610bdd565b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60056020528060005260406000206000915090505481565b6106d9610b10565b6106e36000610be6565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60066020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d79061110a565b60405180910390fd5b6107e8610b8e565b6000811161082b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108229061119c565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146108ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a490611208565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161091193929190611228565b6020604051808303816000875af1158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190611025565b610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098a9061109e565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610a619190610da6565b60405180910390a250610a72610bdd565b50565b610a7d610b10565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae3906112d1565b60405180910390fd5b610af581610be6565b50565b60046020528060005260406000206000915090505481565b610b18610caa565b73ffffffffffffffffffffffffffffffffffffffff16610b366106e5565b73ffffffffffffffffffffffffffffffffffffffff1614610b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b839061133d565b60405180910390fd5b565b600260015403610bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bca906113a9565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ce282610cb7565b9050919050565b610cf281610cd7565b8114610cfd57600080fd5b50565b600081359050610d0f81610ce9565b92915050565b60008115159050919050565b610d2a81610d15565b8114610d3557600080fd5b50565b600081359050610d4781610d21565b92915050565b60008060408385031215610d6457610d63610cb2565b5b6000610d7285828601610d00565b9250506020610d8385828601610d38565b9150509250929050565b6000819050919050565b610da081610d8d565b82525050565b6000602082019050610dbb6000830184610d97565b92915050565b600060208284031215610dd757610dd6610cb2565b5b6000610de584828501610d00565b91505092915050565b610df781610d15565b82525050565b6000602082019050610e126000830184610dee565b92915050565b610e2181610cd7565b82525050565b6000602082019050610e3c6000830184610e18565b92915050565b610e4b81610d8d565b8114610e5657600080fd5b50565b600081359050610e6881610e42565b92915050565b600060208284031215610e8457610e83610cb2565b5b6000610e9284828501610e59565b91505092915050565b600082825260208201905092915050565b7f4e6f207374616b6520746f207769746864726177000000000000000000000000600082015250565b6000610ee2601483610e9b565b9150610eed82610eac565b602082019050919050565b60006020820190508181036000830152610f1181610ed5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f5282610d8d565b9150610f5d83610d8d565b9250828201905080821115610f7557610f74610f18565b5b92915050565b7f56657374696e6720706572696f6420686173206e6f7420656e64656420796574600082015250565b6000610fb1602083610e9b565b9150610fbc82610f7b565b602082019050919050565b60006020820190508181036000830152610fe081610fa4565b9050919050565b6000604082019050610ffc6000830185610e18565b6110096020830184610d97565b9392505050565b60008151905061101f81610d21565b92915050565b60006020828403121561103b5761103a610cb2565b5b600061104984828501611010565b91505092915050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b6000611088601583610e9b565b915061109382611052565b602082019050919050565b600060208201905081810360008301526110b78161107b565b9050919050565b7f596f7520617265206e6f742077686974656c69737465642e0000000000000000600082015250565b60006110f4601883610e9b565b91506110ff826110be565b602082019050919050565b60006020820190508181036000830152611123816110e7565b9050919050565b7f5374616b656420616d6f756e74206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b6000611186602483610e9b565b91506111918261112a565b604082019050919050565b600060208201905081810360008301526111b581611179565b9050919050565b7f596f75206861766520616e20616374697665207374616b650000000000000000600082015250565b60006111f2601883610e9b565b91506111fd826111bc565b602082019050919050565b60006020820190508181036000830152611221816111e5565b9050919050565b600060608201905061123d6000830186610e18565b61124a6020830185610e18565b6112576040830184610d97565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006112bb602683610e9b565b91506112c68261125f565b604082019050919050565b600060208201905081810360008301526112ea816112ae565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611327602083610e9b565b9150611332826112f1565b602082019050919050565b600060208201905081810360008301526113568161131a565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611393601f83610e9b565b915061139e8261135d565b602082019050919050565b600060208201905081810360008301526113c281611386565b905091905056fea264697066735822122052d8a74ac793758a8eadb78b873ec6df35d9a4eee728eb6c04493ddd2a28052e64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063715018a61161008c5780639d76ea58116100665780639d76ea5814610200578063a694fc3a1461021e578063f2fde38b1461023a578063f993185514610256576100cf565b8063715018a6146101a85780638da5cb5b146101b25780639b19251a146101d0576100cf565b80630d392cd9146100d45780631514617e146100f05780633af32abf1461010e5780633ccfd60b1461013e5780634da6a556146101485780636e1dc66e14610178575b600080fd5b6100ee60048036038101906100e99190610d4d565b610286565b005b6100f86102e9565b6040516101059190610da6565b60405180910390f35b61012860048036038101906101239190610dc1565b6102ef565b6040516101359190610dfd565b60405180910390f35b610146610345565b005b610162600480360381019061015d9190610dc1565b610670565b60405161016f9190610da6565b60405180910390f35b610192600480360381019061018d9190610dc1565b6106b9565b60405161019f9190610da6565b60405180910390f35b6101b06106d1565b005b6101ba6106e5565b6040516101c79190610e27565b60405180910390f35b6101ea60048036038101906101e59190610dc1565b61070e565b6040516101f79190610dfd565b60405180910390f35b61020861072e565b6040516102159190610e27565b60405180910390f35b61023860048036038101906102339190610e6e565b610754565b005b610254600480360381019061024f9190610dc1565b610a75565b005b610270600480360381019061026b9190610dc1565b610af8565b60405161027d9190610da6565b60405180910390f35b61028e610b10565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60035481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61034d610b8e565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c690610ef8565b60405180910390fd5b6000600354600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461041e9190610f47565b905080421015610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610fc7565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516105779190610da6565b60405180910390a26000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016105e1929190610fe7565b6020604051808303816000875af1158015610600573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106249190611025565b610663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065a9061109e565b60405180910390fd5b50505061066e610bdd565b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60056020528060005260406000206000915090505481565b6106d9610b10565b6106e36000610be6565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60066020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166107e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d79061110a565b60405180910390fd5b6107e8610b8e565b6000811161082b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108229061119c565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146108ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a490611208565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161091193929190611228565b6020604051808303816000875af1158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190611025565b610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098a9061109e565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610a619190610da6565b60405180910390a250610a72610bdd565b50565b610a7d610b10565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae3906112d1565b60405180910390fd5b610af581610be6565b50565b60046020528060005260406000206000915090505481565b610b18610caa565b73ffffffffffffffffffffffffffffffffffffffff16610b366106e5565b73ffffffffffffffffffffffffffffffffffffffff1614610b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b839061133d565b60405180910390fd5b565b600260015403610bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bca906113a9565b60405180910390fd5b6002600181905550565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ce282610cb7565b9050919050565b610cf281610cd7565b8114610cfd57600080fd5b50565b600081359050610d0f81610ce9565b92915050565b60008115159050919050565b610d2a81610d15565b8114610d3557600080fd5b50565b600081359050610d4781610d21565b92915050565b60008060408385031215610d6457610d63610cb2565b5b6000610d7285828601610d00565b9250506020610d8385828601610d38565b9150509250929050565b6000819050919050565b610da081610d8d565b82525050565b6000602082019050610dbb6000830184610d97565b92915050565b600060208284031215610dd757610dd6610cb2565b5b6000610de584828501610d00565b91505092915050565b610df781610d15565b82525050565b6000602082019050610e126000830184610dee565b92915050565b610e2181610cd7565b82525050565b6000602082019050610e3c6000830184610e18565b92915050565b610e4b81610d8d565b8114610e5657600080fd5b50565b600081359050610e6881610e42565b92915050565b600060208284031215610e8457610e83610cb2565b5b6000610e9284828501610e59565b91505092915050565b600082825260208201905092915050565b7f4e6f207374616b6520746f207769746864726177000000000000000000000000600082015250565b6000610ee2601483610e9b565b9150610eed82610eac565b602082019050919050565b60006020820190508181036000830152610f1181610ed5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f5282610d8d565b9150610f5d83610d8d565b9250828201905080821115610f7557610f74610f18565b5b92915050565b7f56657374696e6720706572696f6420686173206e6f7420656e64656420796574600082015250565b6000610fb1602083610e9b565b9150610fbc82610f7b565b602082019050919050565b60006020820190508181036000830152610fe081610fa4565b9050919050565b6000604082019050610ffc6000830185610e18565b6110096020830184610d97565b9392505050565b60008151905061101f81610d21565b92915050565b60006020828403121561103b5761103a610cb2565b5b600061104984828501611010565b91505092915050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b6000611088601583610e9b565b915061109382611052565b602082019050919050565b600060208201905081810360008301526110b78161107b565b9050919050565b7f596f7520617265206e6f742077686974656c69737465642e0000000000000000600082015250565b60006110f4601883610e9b565b91506110ff826110be565b602082019050919050565b60006020820190508181036000830152611123816110e7565b9050919050565b7f5374616b656420616d6f756e74206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b6000611186602483610e9b565b91506111918261112a565b604082019050919050565b600060208201905081810360008301526111b581611179565b9050919050565b7f596f75206861766520616e20616374697665207374616b650000000000000000600082015250565b60006111f2601883610e9b565b91506111fd826111bc565b602082019050919050565b60006020820190508181036000830152611221816111e5565b9050919050565b600060608201905061123d6000830186610e18565b61124a6020830185610e18565b6112576040830184610d97565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006112bb602683610e9b565b91506112c68261125f565b604082019050919050565b600060208201905081810360008301526112ea816112ae565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611327602083610e9b565b9150611332826112f1565b602082019050919050565b600060208201905081810360008301526113568161131a565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611393601f83610e9b565b915061139e8261135d565b602082019050919050565b600060208201905081810360008301526113c281611386565b905091905056fea264697066735822122052d8a74ac793758a8eadb78b873ec6df35d9a4eee728eb6c04493ddd2a28052e64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingContract.sol:StakingContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/StakingContract.sol:StakingContract",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 288,
        "contract": "contracts/StakingContract.sol:StakingContract",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 290,
        "contract": "contracts/StakingContract.sol:StakingContract",
        "label": "vestingDuration",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 294,
        "contract": "contracts/StakingContract.sol:StakingContract",
        "label": "stakedAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 298,
        "contract": "contracts/StakingContract.sol:StakingContract",
        "label": "startTime",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 302,
        "contract": "contracts/StakingContract.sol:StakingContract",
        "label": "whitelist",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}